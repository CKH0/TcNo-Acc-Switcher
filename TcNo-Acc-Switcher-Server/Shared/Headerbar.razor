@inject IJSRuntime JSRuntime

@using TcNo_Acc_Switcher.Data
@inject AppData AppData

<div id="window-title">
    <img src="img/TcNo_Logo_Flat.svg" class="header_icon" />
    <span>@AppData.WindowTitle</span>
    <div id="window-controls">

        <div class="button" id="btnMin">
            <img class="icon" srcset="img/icons/min-w-10.png 1x, img/icons/min-w-12.png 1.25x, img/icons/min-w-15.png 1.5x, img/icons/min-w-15.png 1.75x, img/icons/min-w-20.png 2x, img/icons/min-w-20.png 2.25x, img/icons/min-w-24.png 2.5x, img/icons/min-w-30.png 3x, img/icons/min-w-30.png 3.5x" draggable="false" />
        </div>

        <div class="button" id="btnMax">
            <img class="icon" srcset="img/icons/max-w-10.png 1x, img/icons/max-w-12.png 1.25x, img/icons/max-w-15.png 1.5x, img/icons/max-w-15.png 1.75x, img/icons/max-w-20.png 2x, img/icons/max-w-20.png 2.25x, img/icons/max-w-24.png 2.5x, img/icons/max-w-30.png 3x, img/icons/max-w-30.png 3.5x" draggable="false" />
        </div>

        <div class="button" id="btnRestore">
            <img class="icon" srcset="img/icons/restore-w-10.png 1x, img/icons/restore-w-12.png 1.25x, img/icons/restore-w-15.png 1.5x, img/icons/restore-w-15.png 1.75x, img/icons/restore-w-20.png 2x, img/icons/restore-w-20.png 2.25x, img/icons/restore-w-24.png 2.5x, img/icons/restore-w-30.png 3x, img/icons/restore-w-30.png 3.5x" draggable="false" />
        </div>

        <div onclick="win.close()" class="button" id="btnClose">
            <img class="icon" srcset="img/icons/close-w-10.png 1x, img/icons/close-w-12.png 1.25x, img/icons/close-w-15.png 1.5x, img/icons/close-w-15.png 1.75x, img/icons/close-w-20.png 2x, img/icons/close-w-20.png 2.25x, img/icons/close-w-24.png 2.5x, img/icons/close-w-30.png 3x, img/icons/close-w-30.png 3.5x" draggable="false" />
        </div>

    </div>
</div>


@code {
    protected override void OnInitialized()
    {
        AppData.OnChange += OnMyChangeHandler;
    }
    private async void OnMyChangeHandler()
    {
        // InvokeAsync is inherited, it syncs the call back to the render thread
        await InvokeAsync(() => StateHasChanged());
    }

    private ElementReference divElement;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("handleWindowControls");
        }
    }
}