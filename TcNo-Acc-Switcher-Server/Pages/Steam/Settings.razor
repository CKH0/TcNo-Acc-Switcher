@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2022 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@page "/Steam/Settings"
@using TcNo_Acc_Switcher_Server.Pages.General.Classes
@using TcNo_Acc_Switcher_Server.Data
@using Task = System.Threading.Tasks.Task
@using Steam = TcNo_Acc_Switcher_Server.Data.Settings.Steam;
@using TcNo_Acc_Switcher_Globals
@using TcNo_Acc_Switcher_Server.Pages.General
@using System.IO
@using System.Threading
@using System.Diagnostics
@namespace TcNo_Acc_Switcher_Server.Pages.Steam
@inject NavigationManager NavManager
@inject AppData AData
@{ AData.SetActiveNavMan(NavManager); }
@inject IJSRuntime JsRuntime
@{ AData.SetActiveIJsRuntime(JsRuntime); }

@inject Lang Locale
@code
{
    private const string Platform = "Steam";
}

<div class="container mainblock">
    <div class="row">
        <div class="col-md-12 col-lg-9 col-xl-8 mx-auto settingsCol">
            <toastarea class="toastarea" />
            <SharedSettings />


            <div class="SettingsHeader">
                <hr><span>@Locale["Settings_Header_GeneralSettings"]</span>
                <hr>
            </div>
            <div class="rowSetting">
                <div class="form-check"><input class="form-check-input" type="checkbox" id="Steam_DesktopShortcut" @bind="Steam.DesktopShortcut" @onclick='() => Shortcut.DesktopShortcut_Toggle("Steam", Steam.DesktopShortcut)'><label class="form-check-label" for="Steam_DesktopShortcut"></label></div><label for="Steam_DesktopShortcut">
		            @Locale["Settings_Shortcut", new { platform = Platform }]<br></label>
            </div>
            <div>
                <div class="form-check"><input class="form-check-input" type="checkbox" id="Steam_Admin" @bind="Steam.Admin"><label class="form-check-label" for="Steam_Admin"></label></div><label for="Steam_Admin">
		            @Locale["Settings_Admin", new { platform = Platform }]<br></label>
            </div>
            <div>
                <div class="form-check"><input class="form-check-input" type="checkbox" id="AutoStart" @bind="Steam.AutoStart"><label class="form-check-label" for="AutoStart"></label></div><label for="AutoStart">
                    @Locale["Settings_AutoStart", new { platform = "Steam" }]<br></label>
            </div>
            <div class="rowSetting rowDropdown">
                <span>@Locale["Settings_Header_ClosingMethod", new { platform = "Steam" }]</span>
                <div class="dropdown" data-toggle="tooltip" title="@(Locale["Tooltip_ClosingMethod"])" data-placement="right">
                    <ul class="custom-dropdown-menu dropdown-menu">
                        <li class="custom-dropdown-item dropdown-item" @onclick='() => Steam.SetClosingMethod("Combined")'>Combined (Best)</li>
                        <li class="custom-dropdown-item dropdown-item" @onclick='() => Steam.SetClosingMethod("Close")'>Close</li>
                        <li class="custom-dropdown-item dropdown-item" @onclick='() => Steam.SetClosingMethod("TaskKill")'>TaskKill (Old)</li>
                    </ul>
                    <button class="dropdown-toggle" type="button" data-toggle="dropdown">
                        @Steam.ClosingMethod
                        <span class="caret"></span>
                    </button>
                </div>
            </div>
            <div class="rowSetting rowDropdown">
                <span>@Locale["Settings_Header_StartingMethod", new { platform = "Steam" }]</span>
                <div class="dropdown" data-toggle="tooltip" title="@(Locale["Tooltip_StartingMethod"])" data-placement="right">
                    <ul class="custom-dropdown-menu dropdown-menu">
                        <li class="custom-dropdown-item dropdown-item" @onclick='() => Steam.SetStartingMethod("Default")'>Default (Best)</li>
                        <li class="custom-dropdown-item dropdown-item" @onclick='() => Steam.SetStartingMethod("Direct")'>Direct</li>
                    </ul>
                    <button class="dropdown-toggle" type="button" data-toggle="dropdown">
                        @Steam.StartingMethod
                        <span class="caret"></span>
                    </button>
                </div>
            </div>
            <div>
                <div class="form-check"><input class="form-check-input" type="checkbox" id="Steam_ShowSteamID" @bind="Steam.ShowSteamId"><label class="form-check-label" for="Steam_ShowSteamID"></label></div><label for="Steam_ShowSteamID">@Locale["Steam_ShowSteamID"]<br></label>
            </div>
            <div>
                <div class="form-check"><input class="form-check-input" type="checkbox" id="Steam_ShowVAC" @bind="Steam.ShowVac"><label class="form-check-label" for="Steam_ShowVAC"></label></div><label for="Steam_ShowVAC">@Locale["Steam_ShowVac"]<br></label>
            </div>
            <div>
	            <div class="form-check"><input class="form-check-input" type="checkbox" id="Steam_ShowLimited" @bind="Steam.ShowLimited"><label class="form-check-label" for="Steam_ShowLimited"></label></div><label for="Steam_ShowLimited">@Locale["Steam_ShowLimited"]<br></label>
            </div>
            <div>
                <div class="form-check"><input class="form-check-input" type="checkbox" id="Steam_ShowAccUsername" @bind="Steam.ShowAccUsername"><label class="form-check-label" for="Steam_ShowAccUsername"></label></div><label for="Steam_ShowAccUsername">@Locale["Steam_ShowAccUsername"]<br></label>
            </div>
            <div>
                <div class="rowSetting rowDropdown">
                    <span>@Locale["Steam_OverrideDefaultState"]</span>
                    <div class="dropdown">
                        <ul class="custom-dropdown-menu dropdown-menu">
                            <li class="custom-dropdown-item dropdown-item" @onclick="() => DefaultState(-1)">@Locale["NoDefault"]</li>
                            <li class="custom-dropdown-item dropdown-item" @onclick="() => DefaultState(1)">@Locale["Online"]</li>
                            <li class="custom-dropdown-item dropdown-item" @onclick="() => DefaultState(7)">@Locale["Invisible"]</li>
                            <li class="custom-dropdown-item dropdown-item" @onclick="() => DefaultState(0)">@Locale["Offline"]</li>
                            <li class="custom-dropdown-item dropdown-item" @onclick="() => DefaultState(2)">@Locale["Busy"]</li>
                            <li class="custom-dropdown-item dropdown-item" @onclick="() => DefaultState(3)">@Locale["Away"]</li>
                            <li class="custom-dropdown-item dropdown-item" @onclick="() => DefaultState(4)">@Locale["Snooze"]</li>
                            <li class="custom-dropdown-item dropdown-item" @onclick="() => DefaultState(5)">@Locale["LookingToTrade"]</li>
                            <li class="custom-dropdown-item dropdown-item" @onclick="() => DefaultState(6)">@Locale["LookingToPlay"]</li>
                        </ul>
                        <button class="dropdown-toggle" type="button" data-toggle="dropdown">
                            @_selectedState
                            <span class="caret"></span>
                        </button>
                    </div>
                </div>
            </div>
            <div class="form-text"><span>@Locale["Settings_ImageExpiry"]</span><input type="number" id="Steam_ImageExpiryTime" min="0" max="365" @bind="Steam.ImageExpiryTime"></div>


            <div class="SettingsHeader">
                <hr><span>@Locale["Settings_Header_TraySettings"]</span>
                <hr>
            </div>
            <div class="rowSetting">
                <div class="form-check"><input class="form-check-input" type="checkbox" id="Steam_TrayAccountName" @bind="Steam.TrayAccName"><label class="form-check-label" for="Steam_TrayAccountName"></label></div><label for="Steam_TrayAccountName">@Locale["Steam_Tray_AccountName"]<br></label>
            </div>
            <div class="form-text"><span>@Locale["Settings_TrayMax"]</span><input type="number" id="Steam_TrayAccNumber" min="0" max="365" @bind="Steam.TrayAccNumber"></div>


            <div class="SettingsHeader">
                <hr><span>@Locale["Settings_Header_GeneralTools"]</span>
                <hr>
            </div>
            <p>@Locale["Settings_CurrentLocation", new { path = Steam.FolderPath }]</p>
            <div class="buttoncol"><button id="Steam_PickFolder" type="button" @onclick="PickFolder"><span>@Locale["Settings_PickFolder", new { platform = Platform }]</span></button><button id="Steam_CheckVAC" type="button" @onclick="ClearVacStatus"><span>@Locale["Steam_CheckVac"]</span></button></div>
            <div class="buttoncol"><button id="Steam_ResetSettings" type="button" @onclick="ClearSettings"><span>@Locale["Button_ResetSettings"]</span></button><button id="Steam_ResetImages" type="button" @onclick="ClearImages"><span>@Locale["Button_RefreshImages"]</span></button></div>


            <div class="SettingsHeader">
                <hr><span>@Locale["Settings_Header_BackupRestore"]</span>
                <hr>
            </div>

            <div class="buttoncol">
                <button id="Steam_Backup" type="button" @onclick="() => BackupButton()" data-toggle="tooltip" title="@(Locale["Tooltip_Backup"])" data-placement="bottom"><span>@Locale["Button_Backup"]</span></button>
                <button id="Steam_BackupEverything" type="button" @onclick="() => BackupButton(true)" data-toggle="tooltip" title="@(Locale["Tooltip_BackupAll"])" data-placement="bottom"><span>@Locale["Button_BackupAll"]</span></button>
            </div>
            <div class="buttoncol">
                <button id="Steam_OpenBackupFolder" type="button" @onclick="OpenBackupFolder"><span>@Locale["Button_OpenBackup"]</span></button>
                <div class="button" id="Restore" type="button" data-toggle="tooltip" title="@(Locale["Tooltip_Restore"])" data-placement="bottom">
                    <InputFile OnChange="@RestoreFile"/>
                    <span>@Locale["Button_Restore"]</span>
                </div>
            </div>


            <div class="SettingsHeader">
                <hr><span>@Locale["Settings_Header_OtherTools"]</span>
                <hr>
            </div>
            <div class="buttoncol"><button id="OpenFolder" type="button" @onclick="() => Data.Settings.Basic.OpenFolder(Steam.FolderPath)"><span>@Locale["Settings_OpenFolder", new { platform = Platform }]</span></button><button id="Steam_AdvancedClearing" type="button" @onclick='() => NavManager.NavigateTo("/Steam/AdvancedClearing")'><span>@Locale["Button_AdvancedCleaning"]</span></button></div>
            <div class="buttoncol col_close"><button class="btn_close" type="button" @onclick="SaveAndClose"><span>@Locale["Button_Close"]</span></button></div>
        </div>
    </div>
</div>
<div id="blazor-error-ui">
    <environment include="Staging,Production">
        An error has occurred. This application may no longer respond until reloaded.
    </environment>
    <environment include="Development">
        An unhandled exception has occurred. See browser dev tools for details.
    </environment>
    <a href="">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code
{
    protected override void OnAfterRender(bool firstRender)
    {
        AppStats.NewNavigation("/Steam/Settings");
        if (!firstRender) return;
        _ = AppData.InvokeVoidAsync("initSavingHotKey");
    }

    public void SaveAndClose()
    {
        AppSettings.SaveSettings();
        Steam.SaveSettings();

        NavManager.NavigateTo("/Steam");
    }

    private string _selectedState = Steam.StateToString(Steam.OverrideState);
    private Task DefaultState(int state)
    {
        Steam.OverrideState = state;
        _selectedState = Steam.StateToString(state);
        return Task.CompletedTask;
    }

    private void OpenBackupFolder()
    {
        if (Directory.Exists("Backups"))
            Process.Start("explorer.exe", Path.GetFullPath("Backups"));
    }

    private readonly Dictionary<string, string> _backupPaths = new()
    {
        { "%Platform_Folder%\\config", "config" },
        { "%Platform_Folder%\\userdata", "userdata" }
    };

    private readonly List<string> _backupFileTypesInclude = new()
    {
        ".cfg", ".ini", ".dat", ".db", ".json", ".ProfileData", ".sav", ".save", ".nfo",".txt", ".vcfg", ".vdf", ".vdf_last", ".vrmanifest", ".xml"
    };

    private static bool _currentlyBackingUp = false;

    /// <summary>
    /// Backs up platform folders, settings, etc - as defined in the platform settings json
    /// </summary>
    private void BackupButton(bool everything = false)
    {
        if (!_currentlyBackingUp)
            _currentlyBackingUp = true;
        else
        {
            _ = GeneralInvocableFuncs.ShowToast("error", Lang["Toast_BackupBusy"], renderTo: "toastarea");
            return;
        }

        // Let user know it's copying files to a temp location
        _ = GeneralInvocableFuncs.ShowToast("info", Lang["Toast_BackupCopy"], renderTo: "toastarea");

        // Generate temporary folder:
        var tempFolder = $"BackupTemp\\Backup_Steam_{DateTime.Now:dd-MM-yyyy_hh-mm-ss}";
        Directory.CreateDirectory("BackupTemp");
        Directory.CreateDirectory("Backups");
        Directory.CreateDirectory(tempFolder);

        if (!everything)
            foreach (var (f, t) in _backupPaths)
            {
                var fExpanded = f.Replace("%Platform_Folder%", Steam.FolderPath);
                if (!Directory.Exists(fExpanded)) continue;
                Globals.CopyFilesRecursive(fExpanded, Path.Join(tempFolder, t), true, _backupFileTypesInclude, true);
            }
        else
            foreach (var (f, t) in _backupPaths)
            {
                var fExpanded = f.Replace("%Platform_Folder%", Steam.FolderPath);
                if (!Directory.Exists(fExpanded)) continue;
                if (!Globals.CopyFilesRecursive(fExpanded ,Path.Join(tempFolder, t)))
                    _ = GeneralInvocableFuncs.ShowToast("error", Lang["Toast_FileCopyFail"], renderTo: "toastarea");
            }

        var backupThread = new Thread(() => FinishBackup(tempFolder));
        backupThread.Start();
    }

    /// <summary>
    /// Runs async so the previous function can return, and an error isn't thrown with the Blazor function timeout
    /// </summary>
    private static void FinishBackup(string tempFolder)
    {
        var folderSize = Globals.FolderSizeString(tempFolder);
        _ = GeneralInvocableFuncs.ShowToast("info", Lang["Toast_BackupCompress", new {size = folderSize}], duration: 3000, renderTo: "toastarea");

        var zipFile = Path.Join("Backups", tempFolder.Split(Path.DirectorySeparatorChar).Last() + ".7z");
        Directory.CreateDirectory("Backups");

        var backupWatcher = new Thread(() => CompressionUpdater(zipFile));
        backupWatcher.Start();

        Globals.CompressFolder(tempFolder, zipFile);

        Globals.RecursiveDelete(tempFolder, false);
        if (File.Exists(zipFile))
            _ = GeneralInvocableFuncs.ShowToast("success", Lang["Toast_BackupComplete", new {size = folderSize, compressedSize = Globals.FileSizeString(zipFile)}], renderTo: "toastarea");
        else
        {
            Globals.WriteToLog($"ERROR: Could not find compressed backup file! Expected path: {zipFile}");
            _ = GeneralInvocableFuncs.ShowToast("error", Lang["Toast_BackupFail"], renderTo: "toastarea");
        }

        _currentlyBackingUp = false;
    }

    /// <summary>
    /// Keeps the user updated with compression progress
    /// </summary>
    private static void CompressionUpdater(string zipFile)
    {
        Thread.Sleep(3500);
        while (_currentlyBackingUp)
        {
            _ = GeneralInvocableFuncs.ShowToast("info", Lang["Toast_BackupProgress", new {compressedSize = Globals.FileSizeString(zipFile)}], duration: 1000, renderTo: "toastarea");
            Thread.Sleep(2000);
        }
    }


    private static bool _currentlyRestoring = false;
    private async void RestoreFile(InputFileChangeEventArgs e)
    {
        if (!_currentlyRestoring)
            _currentlyRestoring = true;
        else
        {
            _ = GeneralInvocableFuncs.ShowToast("error", Lang["Toast_RestoreBusy"], renderTo: "toastarea");
            return;
        }

        foreach (var file in e.GetMultipleFiles(1))
        {
            try
            {
                if (!file.Name.EndsWith("7z")) continue;

                _ = GeneralInvocableFuncs.ShowToast("info", Lang["Toast_RestoreExt"], renderTo: "toastarea");

                var outputFolder = Path.Join("Restore", Path.GetFileNameWithoutExtension(file.Name));
                Directory.CreateDirectory(outputFolder);
                var tempFile = Path.Join("Restore", file.Name);

                // Import 7z
                var s = file.OpenReadStream(4294967296); // 4 GB as bytes
                var fs = File.Create(tempFile);
                await s.CopyToAsync(fs);
                fs.Close();

                // Decompress and remove temp file
                Globals.DecompressZip(tempFile, outputFolder);
                File.Delete(tempFile);

                _ = GeneralInvocableFuncs.ShowToast("info", Lang["Toast_RestoreCopying"], renderTo: "toastarea");

                // Move files and folders back
                foreach (var (toPath, fromPath)in _backupPaths)
                {
                    var fullFromPath = Path.Join(outputFolder, fromPath);
                    if (Globals.IsFile(fullFromPath))
                        Globals.CopyFile(fullFromPath, toPath);
                    else if (Globals.IsFolder(fullFromPath))
                    {
                        if (!Globals.CopyFilesRecursive(fullFromPath, toPath))
                            _ = GeneralInvocableFuncs.ShowToast("error", Lang["Toast_FileCopyFail"], renderTo: "toastarea");
                    }
                }

                _ = GeneralInvocableFuncs.ShowToast("info", Lang["Toast_RestoreDeleting"], renderTo: "toastarea");

                // Remove temp files
                Globals.RecursiveDelete(outputFolder, false);

                _ = GeneralInvocableFuncs.ShowToast("success", Lang["Toast_RestoreComplete"], renderTo: "toastarea");
            }
            catch (Exception ex)
            {
                Globals.WriteToLog("Failed to restore from file: " + file.Name, ex);
                _ = GeneralInvocableFuncs.ShowToast("error", Lang["Status_FailedLog"], renderTo: "toastarea");

            }
            _currentlyRestoring = false;
        }
    }
}
