@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2022 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@page "/Basic/"
@using Microsoft.AspNetCore.WebUtilities
@using TcNo_Acc_Switcher_Globals
@using TcNo_Acc_Switcher_Server.Data
@using TcNo_Acc_Switcher_Server.Pages.General
@using System.IO
@using System.Diagnostics
@inject AppData _appData
@inject IJSRuntime _jsRuntime
@{ _appData.SetActiveIJsRuntime(_jsRuntime); }
@inject NavigationManager _navManager
@{ _appData.SetActiveNavMan(_navManager); }

@inject AppSettings _appSettings
<style>@(new AppSettings().GetCssBlock())</style>
@inject Lang _locale
@inject Data.Settings.Basic _basic


<ContextMenu ContextMenuString="@_basic.ContextMenuJson" />
<div id="acc_list" class="acc_list">
    <toastarea class="toastarea" />
</div>

<div class="shortcutDropdown" id="shortcutDropdown" style="display: none">
    @foreach (var (i, shortcut) in _basic.Shortcuts)
    {
        @if (i >= 0)
        {
            <button id="@(shortcut)" @onclick="() => RunShortcut(shortcut)">
                <img src="@(CurrentPlatform.GetShortcutImagePath(shortcut))" alt="@(shortcut[0])"/>
            </button>
        }
    }
    <button id="btnOpenShortcutFolder" @onclick="() => OpenFolder(Path.GetFullPath(CurrentPlatform.Instance.ShortcutFolder))"><i class="fas fa-plus"></i></button>
</div>

<div class="acc_list_actionbar">
    <div class="statusBar"><div></div><input id="CurrentStatus" @bind="@_appData.CurrentStatus" spellcheck="false" disabled></div>
    <div>

        <div class="shortcuts">
            @foreach (var (i, shortcut) in _basic.Shortcuts)
            {
                @if (i < -1)
                {
                    <button id="@(shortcut)" @onclick="() => RunShortcut(shortcut)">
                        <img src="@(CurrentPlatform.GetShortcutImagePath(shortcut))" alt="@(shortcut[0])"/>
                    </button>
                }
            }
        </div>
        <button id="shortcutDropdownBtn" onclick="shortcutDropdownBtnClick()"><i class="fas fa-chevron-up"></i></button>


        <button id="btnAddNew" onclick="newLogin()">
            <svg viewBox="0 0 448 512" draggable="false" alt="+" class="footerIcoInline">
                <use href="img/fontawesome/plus.svg#img"></use>
            </svg>
            <span>@_locale["Button_AddNew"]</span>
        </button>
        <button id="btnAddCurrent" onclick="showModal('accString');">
            <svg viewBox="0 0 448 512" draggable="false" alt="v" class="footerIcoInline">
                <use href="img/fontawesome/save.svg#img"></use>
            </svg>
            <span>@_locale["Button_SaveCurrent"]</span>
        </button>
        <button class="btn_login" id="btnLogin" onclick="swapTo(-1, event)">
            <span>@_locale["Button_Login"]</span>
            <svg viewBox="0 0 192 512" draggable="false" alt="v" class="footerIcoInline">
                <use href="img/fontawesome/caret-right.svg#img"></use>
            </svg>
        </button>

        <button id="btnSettings" onclick="location = 'Basic/Settings'">
            <svg viewBox="0 0 60 60" draggable="false" alt="Settings" class="footerIcoSettings">
                <use href="img/icons/ico_settings.svg#icoSettings"></use>
            </svg>
        </button>

        <button id="btnHelp" onclick="showModal('info');">
            <svg viewBox="0 0 60 60" draggable="false" alt="Question" class="footerIcoQuestion">
                <use href="img/icons/ico_question.svg#icoQuestion"></use>
            </svg>
        </button>
    </div>

</div>


@code
{
    private void OpenFolder(string folder)
    {
        System.Diagnostics.Process.Start("explorer.exe", folder);
        _ = GeneralInvocableFuncs.ShowToast("info", _locale["Toast_PlaceShortcutFiles"], duration: 15000, renderTo: "toastarea");
    }

    private void RunShortcut(string s)
    {
        var proc = new Process();
        proc.StartInfo = new ProcessStartInfo{
            FileName = Path.GetFullPath(Path.Join(CurrentPlatform.Instance.ShortcutFolder, s)),
            UseShellExecute = true
        };
        proc.Start();
        _ = GeneralInvocableFuncs.ShowToast("info", _locale["Status_StartingPlatform", new {platform = CurrentPlatform.RemoveShortcutExt(s)}], duration: 15000, renderTo: "toastarea");
    }

    // https://github.com/dotnet/aspnetcore/issues/13582
    private bool _navBack;

    // This has to be here for NavManager.
    // This is run before everything is painted on, so that it can get the correct values for the CSS Block.
    protected override void OnParametersSet()
    {
        _appSettings.StreamerModeCheck();

        var requestPlat = "";
        var uri = _navManager.ToAbsoluteUri(_navManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("plat", out var param))
        {
            requestPlat = param.First();
        }

        // Get platform name from URI if not set.
        if (!string.IsNullOrEmpty(requestPlat))
            BasicPlatforms.Instance.SetCurrentPlatformFromShort(requestPlat);

        // If current platform is NOT valid -> Go back
        if (!CurrentPlatform.Instance.IsInit)
        {
            _navBack = true;
            return;
        }

        // Verify that the platform's EXE exists, otherwise go back. For shortcuts and direct navigation.
        if (File.Exists(_basic.Exe())) return;

        _navBack = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_navBack)
        {
            _navManager.NavigateTo(_navManager.BaseUri);
            return;
        }
        await GeneralFuncs.HandleFirstRender(firstRender, CurrentPlatform.Instance.FullName);
    }
}
