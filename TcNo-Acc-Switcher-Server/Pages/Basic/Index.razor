@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2022 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@page "/Basic/"
@using Microsoft.AspNetCore.WebUtilities
@using TcNo_Acc_Switcher_Globals
@using TcNo_Acc_Switcher_Server.Data
@using TcNo_Acc_Switcher_Server.Pages.General
@using System.IO
@using System.Diagnostics
@using Basic = Data.Settings.Basic
@inject AppData _appData
@inject IJSRuntime _jsRuntime
@{ _appData.SetActiveIJsRuntime(_jsRuntime); }
@inject NavigationManager _navManager
@{ _appData.SetActiveNavMan(_navManager); }

<style>@(AppSettings.GetCssBlock())</style>
@inject Lang _locale

<ContextMenu ContextMenuString="@Basic.ContextMenuJson" ContextMenuId="AccOrPlatList" />
<ContextMenu ContextMenuString="@Basic.ContextMenuShortcutJson" ContextMenuId="Shortcuts" />
<ContextMenu ContextMenuString="@Basic.ContextMenuPlatformJson" ContextMenuId="Platform" />
<div id="acc_list" class="acc_list">
    <toastarea class="toastarea" />
</div>

<div class="shortcutDropdown" id="shortcutDropdown" style="display: none">
    @foreach (var (i, shortcut) in Basic.Shortcuts)
    {
        @if (i >= 0)
        {
            <button class="HasContextMenu" id="@(shortcut)" @onclick="() => Basic.RunShortcut(shortcut)" data-toggle="tooltip" title="@(RemoveShortcutExt(shortcut))">
                <img src="@(CurrentPlatform.GetShortcutImagePath(shortcut))" alt="@(shortcut[0])"/>
            </button>
        }
    }
    <button id="btnOpenShortcutFolder" @onclick="() => OpenFolder(Path.GetFullPath(CurrentPlatform.ShortcutFolder))" data-toggle="tooltip" title="@(_locale["Tooltip_ShortcutFolder"])" data-placement="right"><i class="fas fa-plus"></i></button>
</div>

<div class="acc_list_actionbar">
    <div class="statusBar"><div></div><input id="CurrentStatus" @bind="@_appData.CurrentStatus" spellcheck="false" disabled></div>
    <div>
        <div class="shortcuts">
            @foreach (var (i, shortcut) in Basic.Shortcuts)
            {
                @if (i < 0)
                {
                    <button class="HasContextMenu" id="@(shortcut)" @onclick="() => Basic.RunShortcut(shortcut)" data-toggle="tooltip" title="@(RemoveShortcutExt(shortcut))">
                        <img src="@(CurrentPlatform.GetShortcutImagePath(shortcut))" alt="@(shortcut[0])"/>
                    </button>
                }
            }
        </div>
        <button id="shortcutDropdownBtn" onclick="shortcutDropdownBtnClick()" data-toggle="tooltip" title="@(_locale["Tooltip_ExpandShortcuts"])" data-placement="right"><i class="fas fa-chevron-up"></i></button>

        @if (CurrentPlatform.ShortcutIncludeMainExe)
        {
            <button id="btnStartPlat" @onclick="() => Data.Settings.Basic.RunPlatform()" data-toggle="tooltip" title="@(CurrentPlatform.SafeName)">
                <img src="@(CurrentPlatform.GetShortcutImagePath(CurrentPlatform.SafeName))" alt="Start platform"/>
            </button>
        }

        <button id="btnAddNew" onclick="newLogin()">
            <i class="fas fa-plus footerIcoInline"></i>
            <span>@_locale["Button_AddNew"]</span>
        </button>
        <button id="btnAddCurrent" onclick="showModal('accString');">
            <i class="fas fa-save footerIcoInline"></i>
            <span>@_locale["Button_SaveCurrent"]</span>
        </button>
        <button class="btn_login" id="btnLogin" onclick="swapTo(-1, event)">
            <span>@_locale["Button_Login"]</span>
            <i class="fas fa-caret-right footerIcoInline"></i>
        </button>

        <button id="btnSettings" onclick="location = 'Basic/Settings'" data-toggle="tooltip" title="@(_locale["Tooltip_Settings"])">
            <i class="fas fa-cog footerIcoSettings"></i>
        </button>

        <button id="btnHelp" onclick="showModal('info');" data-toggle="tooltip" title="@(_locale["Tooltip_Info"])">
            <i class="fas fa-question footerIcoQuestion"></i>
        </button>
    </div>

</div>


@code
{
    private string RemoveShortcutExt(string s) => s.Replace(".lnk", "").Replace(".url", "");

    private void OpenFolder(string folder)
    {
        Directory.CreateDirectory(folder); // Create if doesn't exist
        Process.Start("explorer.exe", folder);
        _ = GeneralInvocableFuncs.ShowToast("info", _locale["Toast_PlaceShortcutFiles"], renderTo: "toastarea");
    }

    // https://github.com/dotnet/aspnetcore/issues/13582
    private bool _navBack;

    // This has to be here for NavManager.
    // This is run before everything is painted on, so that it can get the correct values for the CSS Block.
    protected override void OnParametersSet()
    {
        AppSettings.StreamerModeCheck();

        var requestPlat = "";
        var uri = _navManager.ToAbsoluteUri(_navManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("plat", out var param))
        {
            requestPlat = param.First();
        }

        // Get platform name from URI if not set.
        if (!string.IsNullOrEmpty(requestPlat))
            BasicPlatforms.SetCurrentPlatformFromShort(requestPlat);

        // If current platform is NOT valid -> Go back
        if (!CurrentPlatform.IsInit)
        {
            _navBack = true;
            return;
        }

        // Verify that the platform's EXE exists, otherwise go back. For shortcuts and direct navigation.
        if (File.Exists(Basic.Exe())) return;

        _navBack = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_navBack)
        {
            _navManager.NavigateTo(_navManager.BaseUri);
            return;
        }
        await GeneralFuncs.HandleFirstRender(firstRender, CurrentPlatform.FullName);
    }
}
