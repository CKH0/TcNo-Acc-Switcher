@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2022 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@page "/Basic/Settings"
@using TcNo_Acc_Switcher_Server.Pages.General.Classes
@using TcNo_Acc_Switcher_Server.Data
@using Basic = Data.Settings.Basic
@namespace TcNo_Acc_Switcher_Server.Pages.Basic
@inject NavigationManager _navManager
@{ AppData.SetActiveNavMan(_navManager); }
@inject IJSRuntime _jsRuntime
@{ AppData.SetActiveIJsRuntime(_jsRuntime); }

@inject Data.Lang  _locale

<div class="container mainblock">
    <div class="row">
        <div class="col-md-12 col-lg-9 col-xl-8 mx-auto settingsCol">
            <toastarea class="toastarea" />
            <SharedSettings />


            <div class="SettingsHeader">
                <hr><span>@_locale["Settings_Header_GeneralSettings"]</span>
                <hr>
            </div>
            <div class="rowSetting">
                <div class="form-check"><input class="form-check-input" type="checkbox" id="DesktopShortcut" @bind="Basic.DesktopShortcut" @onclick="() => Shortcut.DesktopShortcut_Toggle(CurrentPlatform.FullName, Basic.DesktopShortcut)"><label class="form-check-label" for="DesktopShortcut"></label></div><label for="DesktopShortcut">
		            @_locale["Settings_Shortcut", new { platform = CurrentPlatform.FullName }]<br></label>
            </div>
            <div>
                <div class="form-check"><input class="form-check-input" type="checkbox" id="Admin" @bind="Basic.Admin"><label class="form-check-label" for="Admin"></label></div><label for="Admin">
		            @_locale["Settings_Admin", new { platform = CurrentPlatform.FullName }]<br></label>
            </div>
            <div class="rowSetting rowDropdown">
                <span>@_locale["Settings_Header_ClosingMethod", new { platform = CurrentPlatform.FullName }]</span>
                <div class="dropdown" data-toggle="tooltip" title="@(_locale["Tooltip_ClosingMethod"])" data-placement="right">
                    <ul class="custom-dropdown-menu dropdown-menu">
                        <li class="custom-dropdown-item dropdown-item" @onclick='() => Basic.SetClosingMethod("Combined")'>Combined (Best)</li>
                        <li class="custom-dropdown-item dropdown-item" @onclick='() => Basic.SetClosingMethod("Close")'>Close</li>
                        <li class="custom-dropdown-item dropdown-item" @onclick='() => Basic.SetClosingMethod("TaskKill")'>TaskKill (Old)</li>
                    </ul>
                    <button class="dropdown-toggle" type="button" data-toggle="dropdown">
                        @Basic.ClosingMethod
                        <span class="caret"></span>
                    </button>
                </div>
            </div>
            <div class="rowSetting rowDropdown">
                <span>@_locale["Settings_Header_StartingMethod", new { platform = CurrentPlatform.FullName }]</span>
                <div class="dropdown" data-toggle="tooltip" title="@(_locale["Tooltip_StartingMethod"])" data-placement="right">
                    <ul class="custom-dropdown-menu dropdown-menu">
                        <li class="custom-dropdown-item dropdown-item" @onclick='() => Basic.SetStartingMethod("Default")'>Default (Best)</li>
                        <li class="custom-dropdown-item dropdown-item" @onclick='() => Basic.SetStartingMethod("Direct")'>Direct</li>
                    </ul>
                    <button class="dropdown-toggle" type="button" data-toggle="dropdown">
                        @Basic.StartingMethod
                        <span class="caret"></span>
                    </button>
                </div>
            </div>


            <div class="SettingsHeader">
                <hr><span>@_locale["Settings_Header_TraySettings"]</span>
                <hr>
            </div>
            <div class="form-text"><span>@_locale["Settings_TrayMax"]</span><input type="number" id="TrayAccNumber" min="0" max="365" @bind="Basic.TrayAccNumber"></div>


            <div class="SettingsHeader">
                <hr><span>@_locale["Settings_Header_GeneralTools"]</span>
                <hr>
            </div>
            <p>@_locale["Settings_CurrentLocation", new { path = Basic.FolderPath }]</p>
            <div class="buttoncol"><button id="PickFolder" type="button" @onclick="PickFolder"><span>@_locale["Settings_PickFolder", new { platform = CurrentPlatform.FullName }]</span></button><button id="OpenFolder" type="button" @onclick="() => Basic.OpenFolder(Basic.FolderPath)"><span>@_locale["Settings_OpenFolder", new { platform = CurrentPlatform.FullName }]</span></button></div>
            <div class="buttoncol"><button id="ResetSettings" type="button" @onclick="ClearSettings"><span>@_locale["Button_ResetSettings"]</span></button>
                @if (CurrentPlatform.CachePaths != null)
                {
                    <button id="ClearCache" type="button" @onclick="BasicSwitcherFuncs.ClearCache" data-toggle="tooltip" title="@(GetCacheList())" data-html="true"><span>@_locale["Platform_ClearCache"]</span></button>
                }
            </div>

            @if (CurrentPlatform.BackupPaths.Count > 0)
            {
                <div class="SettingsHeader">
                    <hr><span>@_locale["Settings_Header_BackupRestore"]</span>
                    <hr>
                </div>

                <div class="buttoncol">
                    @if (CurrentPlatform.BackupFileTypesInclude.Count != 0 || CurrentPlatform.BackupFileTypesIgnore.Count != 0){
                        <button id="Backup" type="button" @onclick="() => BackupButton()" data-toggle="tooltip" title="@(_locale["Tooltip_Backup"])" data-placement="bottom"><span>@_locale["Button_Backup"]</span></button>
                    }

                    <button id="BackupEverything" type="button" @onclick="() => BackupButton(true)" data-toggle="tooltip" title="@(_locale["Tooltip_BackupAll"])" data-placement="bottom"><span>@_locale["Button_BackupAll"]</span></button>

                    @if (CurrentPlatform.BackupFileTypesInclude.Count == 0 && CurrentPlatform.BackupFileTypesIgnore.Count == 0) {
                        <button id="OpenBackupFolder" type="button" @onclick="OpenBackupFolder"><span>@_locale["Button_OpenBackup"]</span></button>
                    }
                </div>
                <div class="buttoncol">

                    @if (CurrentPlatform.BackupFileTypesInclude.Count != 0 || CurrentPlatform.BackupFileTypesIgnore.Count != 0) {
                        <button id="OpenBackupFolder" type="button" @onclick="OpenBackupFolder"><span>@_locale["Button_OpenBackup"]</span></button>
                    }

                    <div class="button" id="Restore" type="button" data-toggle="tooltip" title="@(_locale["Tooltip_Restore"])" data-placement="bottom">
                        <InputFile OnChange="@RestoreFile"/>
                        <span>@_locale["Button_Restore"]</span>
                    </div>
                </div>
            }


            <div class="buttoncol col_close"><button class="btn_close" type="button" @onclick="SaveAndClose"><span>@_locale["Button_Close"]</span></button></div>
        </div>
    </div>
</div>
<div id="blazor-error-ui">
    <environment include="Staging,Production">
        An error has occurred. This application may no longer respond until reloaded.
    </environment>
    <environment include="Development">
        An unhandled exception has occurred. See browser dev tools for details.
    </environment>
    <a href="">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code
{
    public void SaveAndClose()
    {
        AppSettings.SaveSettings();
        Basic.SaveSettings();

        _navManager.NavigateTo("/Basic");
    }

    private static string GetCacheList()
    {
        var listOfFiles = new List<string>(CurrentPlatform.CachePaths);
        return Lang["FileFoldersToClear"] + "<br>" + string.Join("<br>", listOfFiles.Select(x => x.Replace("Platform_Folder", CurrentPlatform.FullName)).ToList());
    }
}
